/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdminLogin.Revenue;

import Business.Business;
import Business.Order;
import Business.OrderList;
import Business.Product;
import Business.Supplier;
import java.awt.CardLayout;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumanth
 */
public class SalesPersonAboveBelowTargJpanel extends javax.swing.JPanel {

    /**
     * Creates new form SalesPersonAboveBelowTargJpanel
     */
    JPanel userProcessContainer;
    Business business;
    List<String> salesPerson;

    public SalesPersonAboveBelowTargJpanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        getTotalPrice();
    }

    public void getTotalPrice() {
        /*ArrayList<Product> products = business.getProductCatalog().getProductCatalogDir();
        targetPrice =0;
        for (Supplier s : business.getSupplierDir().getSupplierDir()) {
            for (Product p : s.getProductCatalag().getProductCatalogDir()) {
                targetPrice = targetPrice + ((p.getPrice()*1.2)*(p.getAvail()));
            }
        }*/
        ArrayList<OrderList> listOfOrders = business.getMasterOrderCatalog().getOrderList();
        salesPerson = new ArrayList();
        for (OrderList ol : listOfOrders) {
            for (Order o : ol.getOrderList()) {
                salesPerson.add(o.getSalesPerson().getSalesPersonName());
            }
        }
        salesPerson = salesPerson.stream().distinct().collect(Collectors.toList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        marketNameBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        prodJTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        marketNameBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Above Target Sale", "Below Target Sale" }));
        marketNameBox.setToolTipText("");
        add(marketNameBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 230, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("               Sales persons with Above and Below Target Values");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 500, 50));

        prodJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sales Person Name", "Revenue", "Target Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(prodJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 230, 590, 120));

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 130, 40));

        jLabel3.setText("Select Above/Below");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 124, 110, 40));

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

        ArrayList<OrderList> listOfOrders = business.getMasterOrderCatalog().getOrderList();
        Map<String, ArrayList<Map.Entry<Double, Double>>> map = new HashMap();
        double checkedPrice;
        double targetPrice;
        List<Entry<Double, Double>> price;
        for (String p : salesPerson) {
            checkedPrice = 0;
            targetPrice = 0;
            price = new ArrayList();
            for (OrderList ol : listOfOrders) {
                for (Order o : ol.getOrderList()) {
                    if (o.getSalesPerson().getSalesPersonName().equals(p)) {
                        checkedPrice = checkedPrice + (o.getQuantity() * o.getSalesPrice());
                        targetPrice = targetPrice + (o.getQuantity() * (o.getProduct().getPrice() * 1.2));
                    }
                }
            }
            price.add(new AbstractMap.SimpleEntry(checkedPrice,targetPrice));
            map.put(p, (ArrayList<Entry<Double, Double>>) price);
        }
        Map<String, ArrayList<Map.Entry<Double, Double>>> aboveTargetSales = new HashMap();
        Map<String, ArrayList<Map.Entry<Double, Double>>> belowTargetSales = new HashMap();
        for (Map.Entry<String, ArrayList<Map.Entry<Double, Double>>> entry : map.entrySet()) {
            if (entry.getValue().get(0).getKey() > entry.getValue().get(0).getValue()) {
                aboveTargetSales.put(entry.getKey(),entry.getValue());
            } else if (entry.getValue().get(0).getKey() < entry.getValue().get(0).getValue()) {
                belowTargetSales.put(entry.getKey(),entry.getValue());
            }
        }

        if (marketNameBox.getSelectedItem() == "Above Target Sale") {
            populateTable(aboveTargetSales);
        } else if (marketNameBox.getSelectedItem() == "Below Target Sale") {
            populateTable(belowTargetSales);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    public void populateTable(Map<String, ArrayList<Map.Entry<Double, Double>>>  list) {
        DefaultTableModel model = (DefaultTableModel) prodJTable.getModel();
        model.setRowCount(0);
        for (Map.Entry<String, ArrayList<Map.Entry<Double, Double>>> entry : list.entrySet()) {
            Object row[] = new Object[3];
            row[0] = entry.getKey();
            row[1] = entry.getValue().get(0).getKey();
            row[2] = entry.getValue().get(0).getValue();
            model.addRow(row);
        }
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox marketNameBox;
    private javax.swing.JTable prodJTable;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
